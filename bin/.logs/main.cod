; Listing generated by Microsoft (R) Optimizing Compiler Version 19.36.32532.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	ExPoolZeroingNativelySupported
;	COMDAT ExPoolZeroingNativelySupported
_BSS	SEGMENT
ExPoolZeroingNativelySupported DB 01H DUP (?)
_BSS	ENDS
PUBLIC	DriverEntry
PUBLIC	?fptr_addr@core_hook@@3_KA			; core_hook::fptr_addr
PUBLIC	?o_function_qword_1@core_hook@@3P6A_JPEAX@ZEA	; core_hook::o_function_qword_1
PUBLIC	__isa_available_default
PUBLIC	__xmm@00000003000000020000000100000000
PUBLIC	__xmm@00000038000000380000003800000038
PUBLIC	__xmm@00ff00ff00ff00ff00ff00ff00ff00ff
PUBLIC	__xmm@37373737373737373737373737373737
PUBLIC	__xmm@92492493924924939249249392492493
EXTRN	?get_system_module@system@@YA_KPEBG@Z:PROC	; system::get_system_module
EXTRN	?hooked_fptr@core_hook@@YA_JPEAX@Z:PROC		; core_hook::hooked_fptr
EXTRN	__isa_available:DWORD
;	COMDAT ?fptr_addr@core_hook@@3_KA
_BSS	SEGMENT
?fptr_addr@core_hook@@3_KA DQ 01H DUP (?)		; core_hook::fptr_addr
_BSS	ENDS
;	COMDAT ?o_function_qword_1@core_hook@@3P6A_JPEAX@ZEA
_BSS	SEGMENT
?o_function_qword_1@core_hook@@3P6A_JPEAX@ZEA DQ 01H DUP (?) ; core_hook::o_function_qword_1
_BSS	ENDS
;	COMDAT __isa_available_default
_BSS	SEGMENT
__isa_available_default DD 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?find_pattern@system@@YA_K_K0PEBD1@Z DD imagerel ?find_pattern@system@@YA_K_K0PEBD1@Z
	DD	imagerel ?find_pattern@system@@YA_K_K0PEBD1@Z+180
	DD	imagerel $unwind$?find_pattern@system@@YA_K_K0PEBD1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?find_pattern@system@@YA_K_KPEBD1@Z DD imagerel ?find_pattern@system@@YA_K_KPEBD1@Z
	DD	imagerel ?find_pattern@system@@YA_K_KPEBD1@Z+239
	DD	imagerel $unwind$?find_pattern@system@@YA_K_KPEBD1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DriverEntry DD imagerel $LN154
	DD	imagerel $LN154+158
	DD	imagerel $unwind$DriverEntry
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$DriverEntry DD imagerel $LN154+158
	DD	imagerel $LN154+325
	DD	imagerel $chain$3$DriverEntry
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$DriverEntry DD imagerel $LN154+325
	DD	imagerel $LN154+1426
	DD	imagerel $chain$6$DriverEntry
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$DriverEntry DD imagerel $LN154+1426
	DD	imagerel $LN154+1489
	DD	imagerel $chain$8$DriverEntry
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$DriverEntry DD imagerel $LN154+1489
	DD	imagerel $LN154+1724
	DD	imagerel $chain$9$DriverEntry
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$11$DriverEntry DD imagerel $LN154+1724
	DD	imagerel $LN154+1775
	DD	imagerel $chain$11$DriverEntry
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decrypt@?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@QEAAPEADXZ DD imagerel $LN29
	DD	imagerel $LN29+65
	DD	imagerel $unwind$?decrypt@?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?decrypt@?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@QEAAPEADXZ DD imagerel $LN29+65
	DD	imagerel $LN29+407
	DD	imagerel $chain$2$?decrypt@?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?decrypt@?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@QEAAPEADXZ DD imagerel $LN29+407
	DD	imagerel $LN29+479
	DD	imagerel $chain$3$?decrypt@?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@QEAAPEADXZ DD imagerel $LN31
	DD	imagerel $LN31+65
	DD	imagerel $unwind$??B?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$??B?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@QEAAPEADXZ DD imagerel $LN31+65
	DD	imagerel $LN31+407
	DD	imagerel $chain$2$??B?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$??B?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@QEAAPEADXZ DD imagerel $LN31+407
	DD	imagerel $LN31+479
	DD	imagerel $chain$3$??B?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?crypt@?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@AEAAXPEAD@Z DD imagerel $LN21
	DD	imagerel $LN21+59
	DD	imagerel $unwind$?crypt@?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@AEAAXPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?crypt@?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@AEAAXPEAD@Z DD imagerel $LN21+59
	DD	imagerel $LN21+448
	DD	imagerel $chain$2$?crypt@?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@AEAAXPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?crypt@?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@AEAAXPEAD@Z DD imagerel $LN21+448
	DD	imagerel $LN21+529
	DD	imagerel $chain$3$?crypt@?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@AEAAXPEAD@Z
pdata	ENDS
;	COMDAT __xmm@92492493924924939249249392492493
CONST	SEGMENT
__xmm@92492493924924939249249392492493 DB 093H, '$I', 092H, 093H, '$I', 092H
	DB	093H, '$I', 092H, 093H, '$I', 092H
CONST	ENDS
;	COMDAT __xmm@37373737373737373737373737373737
CONST	SEGMENT
__xmm@37373737373737373737373737373737 DB '7777777777777777'
CONST	ENDS
;	COMDAT __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
CONST	SEGMENT
__xmm@00ff00ff00ff00ff00ff00ff00ff00ff DB 0ffH, 00H, 0ffH, 00H, 0ffH, 00H
	DB	0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH, 00H
CONST	ENDS
;	COMDAT __xmm@00000038000000380000003800000038
CONST	SEGMENT
__xmm@00000038000000380000003800000038 DB '8', 00H, 00H, 00H, '8', 00H, 00H
	DB	00H, '8', 00H, 00H, 00H, '8', 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000003000000020000000100000000
CONST	SEGMENT
__xmm@00000003000000020000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 02H, 00H, 00H, 00H, 03H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT ?crypted@?1???R<lambda_96b242c342b240ccc20b98338cb7aace>@@QEBA@XZ@4V?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@B
CONST	SEGMENT
?crypted@?1???R<lambda_96b242c342b240ccc20b98338cb7aace>@@QEBA@XZ@4V?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@B DB 04fH ; `<lambda_96b242c342b240ccc20b98338cb7aace>::operator()'::`2'::crypted
	DB	040H
	DB	041H
	DB	05H
	DB	04H
	DB	03H
	DB	02H
	DB	046H
	DB	047H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	07aH
	DB	079H
	DB	078H
	DB	077H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	061H
	DB	060H
	DB	05fH
	DB	05eH
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	010H
	DB	056H
	DB	055H
	DB	054H
	DB	053H
	DB	015H
	DB	016H
	DB	04fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	030H
	DB	031H
	DB	075H
	DB	074H
	DB	073H
	DB	072H
	DB	036H
	DB	037H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	06aH
	DB	069H
	DB	068H
	DB	067H
	DB	021H
	DB	022H
	DB	023H
	DB	063H
	DB	062H
	DB	061H
	DB	060H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	04fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	01H
	DB	00H
	DB	07fH
	DB	07eH
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	030H
	DB	076H
	DB	075H
	DB	074H
	DB	073H
	DB	035H
	DB	036H
	DB	037H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	018H
	DB	019H
	DB	05dH
	DB	05cH
	DB	05bH
	DB	05aH
	DB	01eH
	DB	01fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	052H
	DB	051H
	DB	08H
	DB	07H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	071H
	DB	070H
	DB	06fH
	DB	06eH
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	020H
	DB	066H
	DB	065H
	DB	064H
	DB	063H
	DB	025H
	DB	026H
	DB	027H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	04fH
	DB	040H
	DB	041H
	DB	05H
	DB	04H
	DB	03H
	DB	02H
	DB	046H
	DB	047H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	07aH
	DB	079H
	DB	078H
	DB	077H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	020H
	DB	021H
	DB	022H
	DB	05bH
CONST	ENDS
;	COMDAT ?crypted@?1???R<lambda_44f8de2005997dbbdec1c0f27538620f>@@QEBA@XZ@4V?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@B
CONST	SEGMENT
?crypted@?1???R<lambda_44f8de2005997dbbdec1c0f27538620f>@@QEBA@XZ@4V?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@B DB 07fH ; `<lambda_44f8de2005997dbbdec1c0f27538620f>::operator()'::`2'::crypted
	DB	0b3H
	DB	03cH
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	076H
	DB	0baH
	DB	080H
	DB	035H
	DB	044H
	DB	0bcH
	DB	051H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	01H
	DB	0c9H
	DB	08fH
	DB	064H
	DB	08eH
	DB	082H
	DB	083H
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	098H
	DB	099H
	DB	09aH
	DB	01fH
	DB	0dbH
	DB	0b5H
	DB	072H
	DB	013H
	DB	0d7H
	DB	058H
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	02aH
	DB	0e6H
	DB	0a4H
	DB	011H
	DB	060H
	DB	098H
	DB	07dH
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	025H
	DB	0edH
	DB	0f3H
	DB	010H
	DB	0faH
	DB	0f6H
	DB	0f7H
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	08cH
	DB	08dH
	DB	08eH
	DB	0bH
	DB	0c7H
	DB	0a9H
	DB	06eH
	DB	0fH
	DB	0c3H
	DB	04cH
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	06H
	DB	0caH
	DB	090H
	DB	025H
	DB	05aH
	DB	0acH
	DB	041H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	0b2H
	DB	05fH
	DB	0e3H
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	028H
	DB	0e2H
	DB	0a6H
	DB	04bH
	DB	0a7H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	07fH
	DB	0bbH
	DB	0d5H
	DB	012H
	DB	073H
	DB	0b7H
	DB	038H
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	0aH
	DB	0c6H
	DB	084H
	DB	031H
	DB	040H
	DB	0b8H
	DB	05dH
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	05H
	DB	0cdH
	DB	08bH
	DB	078H
	DB	092H
	DB	09eH
	DB	09fH
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	094H
	DB	095H
	DB	096H
	DB	013H
	DB	0dfH
	DB	0b1H
	DB	076H
	DB	017H
	DB	0ebH
	DB	064H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	02eH
	DB	0e2H
	DB	0a8H
	DB	01dH
	DB	06cH
	DB	094H
	DB	079H
	DB	06dH
	DB	06eH
	DB	037H
	DB	038H
	DB	071H
	DB	0b9H
	DB	0ffH
	DB	014H
	DB	0feH
	DB	0f2H
	DB	0f3H
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	088H
	DB	089H
	DB	08aH
	DB	0fH
	DB	0cbH
	DB	0a5H
	DB	062H
	DB	03H
	DB	0c7H
	DB	048H
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	01aH
	DB	0d6H
	DB	094H
	DB	021H
	DB	050H
	DB	0a8H
	DB	04dH
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	015H
	DB	0ddH
	DB	09bH
	DB	048H
	DB	0a2H
	DB	0aeH
	DB	0afH
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	023H
	DB	0efH
	DB	081H
	DB	046H
	DB	07fH
	DB	0b3H
	DB	03cH
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	076H
	DB	0baH
	DB	080H
	DB	035H
	DB	044H
	DB	0bcH
	DB	051H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	01H
	DB	0c9H
	DB	08fH
	DB	064H
	DB	08eH
	DB	082H
	DB	083H
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	098H
	DB	099H
	DB	09aH
	DB	01fH
	DB	0dbH
	DB	0b5H
	DB	062H
	DB	05bH
CONST	ENDS
;	COMDAT ?crypted@?1???R<lambda_6ef4678cc8d1c716ef7434f7e7de18eb>@@QEBA@XZ@4V?$xorcrypt@$0L@$0DH@$0DH@G@xorcrypt@@B
CONST	SEGMENT
?crypted@?1???R<lambda_6ef4678cc8d1c716ef7434f7e7de18eb>@@QEBA@XZ@4V?$xorcrypt@$0L@$0DH@$0DH@G@xorcrypt@@B DW 040H ; `<lambda_6ef4678cc8d1c716ef7434f7e7de18eb>::operator()'::`2'::crypted
	DW	051H
	DW	057H
	DW	09H
	DW	09H
	DW	057H
	DW	013H
	DW	04dH
	DW	046H
	DW	033H
	DW	041H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?crypt@?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@AEAAXPEAD@Z DD 020022H
	DD	06001601H
	DD	imagerel $LN21
	DD	imagerel $LN21+59
	DD	imagerel $unwind$?crypt@?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@AEAAXPEAD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?crypt@?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@AEAAXPEAD@Z DD 061022H
	DD	018810H
	DD	02780aH
	DD	036805H
	DD	imagerel $LN21
	DD	imagerel $LN21+59
	DD	imagerel $unwind$?crypt@?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@AEAAXPEAD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?crypt@?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@AEAAXPEAD@Z DD 010402H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$??B?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@QEAAPEADXZ DD 020022H
	DD	06001601H
	DD	imagerel $LN31
	DD	imagerel $LN31+65
	DD	imagerel $unwind$??B?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$??B?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@QEAAPEADXZ DD 062922H
	DD	018829H
	DD	02780aH
	DD	036805H
	DD	imagerel $LN31
	DD	imagerel $LN31+65
	DD	imagerel $unwind$??B?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@QEAAPEADXZ DD 010402H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?decrypt@?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@QEAAPEADXZ DD 020022H
	DD	06001601H
	DD	imagerel $LN29
	DD	imagerel $LN29+65
	DD	imagerel $unwind$?decrypt@?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?decrypt@?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@QEAAPEADXZ DD 062922H
	DD	018829H
	DD	02780aH
	DD	036805H
	DD	imagerel $LN29
	DD	imagerel $LN29+65
	DD	imagerel $unwind$?decrypt@?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@QEAAPEADXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decrypt@?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@QEAAPEADXZ DD 010402H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$11$DriverEntry DD 0c0022H
	DD	052f400H
	DD	053e400H
	DD	054d400H
	DD	05a7400H
	DD	0596400H
	DD	0583400H
	DD	imagerel $LN154
	DD	imagerel $LN154+158
	DD	imagerel $unwind$DriverEntry
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$DriverEntry DD 060022H
	DD	06001604H
	DD	054d400H
	DD	05a7400H
	DD	imagerel $LN154+158
	DD	imagerel $LN154+325
	DD	imagerel $chain$3$DriverEntry
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$DriverEntry DD 041022H
	DD	054d410H
	DD	05a7408H
	DD	imagerel $LN154+325
	DD	imagerel $LN154+1426
	DD	imagerel $chain$6$DriverEntry
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$DriverEntry DD 062122H
	DD	0268821H
	DD	0277814H
	DD	0286808H
	DD	imagerel $LN154+158
	DD	imagerel $LN154+325
	DD	imagerel $chain$3$DriverEntry
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$DriverEntry DD 083222H
	DD	052f432H
	DD	053e42aH
	DD	0596415H
	DD	0583408H
	DD	imagerel $LN154
	DD	imagerel $LN154+158
	DD	imagerel $unwind$DriverEntry
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DriverEntry DD 061302H
	DD	06001604H
	DD	0550113H
	DD	05002c004H
xdata	ENDS
;	COMDAT gfids$y
gfids$y	SEGMENT
__guard_fids_DriverEntry DDSymXIndex:  FLAT:?hooked_fptr@core_hook@@YA_JPEAX@Z
gfids$y	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?find_pattern@system@@YA_K_KPEBD1@Z DD 0e1c02H
	DD	061b0609H
	DD	08741cH
	DD	07641cH
	DD	06541cH
	DD	05341cH
	DD	0e01af01cH
	DD	0c016d018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?find_pattern@system@@YA_K_K0PEBD1@Z DD 092f02H
	DD	06251602H
	DD	02642fH
	DD	04540bH
	DD	03340bH
	DD	0700bH
xdata	ENDS
; Function compile flags: /Ogtp
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\main.cpp
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\driver\xorstr.h
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\main.cpp
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\driver\xorstr.h
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\main.cpp
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\driver\xorstr.h
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\main.cpp
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\driver\xorstr.h
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\main.cpp
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\driver\xorstr.h
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\main.cpp
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\driver\xorstr.h
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\main.cpp
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\driver\xorstr.h
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\main.cpp
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\driver\xorstr.h
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\system\funcs.h
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\main.cpp
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\system\funcs.h
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\main.cpp
;	COMDAT DriverEntry
_TEXT	SEGMENT
$T2 = 32
$T3 = 64
$T4 = 80
$T5 = 341
__formal$ = 704
__formal$ = 712
DriverEntry PROC					; COMDAT

; 9    : {

$LN154:
  00000	40 55		 push	 rbp
  00002	41 54		 push	 r12
  00004	48 8d ac 24 58
	fe ff ff	 lea	 rbp, QWORD PTR [rsp-424]
  0000c	48 81 ec a8 02
	00 00		 sub	 rsp, 680		; 000002a8H

; 11   : 	uintptr_t win32k = system::get_system_module(XORS(L"win32k.sys"));

  00013	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?crypted@?1???R<lambda_6ef4678cc8d1c716ef7434f7e7de18eb>@@QEBA@XZ@4V?$xorcrypt@$0L@$0DH@$0DH@G@xorcrypt@@B+16
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\driver\xorstr.h

; 125  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00019	ba 77 00 00 00	 mov	 edx, 119		; 00000077H
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\main.cpp

; 11   : 	uintptr_t win32k = system::get_system_module(XORS(L"win32k.sys"));

  0001e	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?crypted@?1???R<lambda_6ef4678cc8d1c716ef7434f7e7de18eb>@@QEBA@XZ@4V?$xorcrypt@$0L@$0DH@$0DH@G@xorcrypt@@B
  00025	0f b7 05 14 00
	00 00		 movzx	 eax, WORD PTR ?crypted@?1???R<lambda_6ef4678cc8d1c716ef7434f7e7de18eb>@@QEBA@XZ@4V?$xorcrypt@$0L@$0DH@$0DH@G@xorcrypt@@B+20
  0002c	89 4c 24 30	 mov	 DWORD PTR $T2[rsp+16], ecx
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\driver\xorstr.h

; 125  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00030	66 83 f0 41	 xor	 ax, 65			; 00000041H
  00034	66 83 74 24 32
	40		 xor	 WORD PTR $T2[rsp+18], 64 ; 00000040H
  0003a	66 83 f1 3f	 xor	 cx, 63			; 0000003fH
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\main.cpp

; 11   : 	uintptr_t win32k = system::get_system_module(XORS(L"win32k.sys"));

  0003e	0f 11 44 24 20	 movups	 XMMWORD PTR $T2[rsp], xmm0
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\driver\xorstr.h

; 125  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00043	66 83 74 24 22
	38		 xor	 WORD PTR $T2[rsp+2], 56	; 00000038H
  00049	66 83 74 24 24
	39		 xor	 WORD PTR $T2[rsp+4], 57	; 00000039H
  0004f	66 83 74 24 26
	3a		 xor	 WORD PTR $T2[rsp+6], 58	; 0000003aH
  00055	66 83 74 24 28
	3b		 xor	 WORD PTR $T2[rsp+8], 59	; 0000003bH
  0005b	66 83 74 24 2a
	3c		 xor	 WORD PTR $T2[rsp+10], 60 ; 0000003cH
  00061	66 83 74 24 2c
	3d		 xor	 WORD PTR $T2[rsp+12], 61 ; 0000003dH
  00067	66 83 74 24 2e
	3e		 xor	 WORD PTR $T2[rsp+14], 62 ; 0000003eH
  0006d	66 89 4c 24 30	 mov	 WORD PTR $T2[rsp+16], cx
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\main.cpp

; 11   : 	uintptr_t win32k = system::get_system_module(XORS(L"win32k.sys"));

  00072	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T2[rsp]
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\driver\xorstr.h

; 125  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00077	66 89 54 24 20	 mov	 WORD PTR $T2[rsp], dx
  0007c	66 89 44 24 34	 mov	 WORD PTR $T2[rsp+20], ax
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\main.cpp

; 11   : 	uintptr_t win32k = system::get_system_module(XORS(L"win32k.sys"));

  00081	e8 00 00 00 00	 call	 ?get_system_module@system@@YA_KPEBG@Z ; system::get_system_module
  00086	4c 8b e0	 mov	 r12, rax

; 12   : 	if (!win32k)

  00089	48 85 c0	 test	 rax, rax
  0008c	75 10		 jne	 SHORT $LN2@DriverEntr

; 13   : 	{
; 14   : 		printf("win32k.sys not found in system modules, unable to load driver.\n");
; 15   : 		return STATUS_ABANDONED;

  0008e	b8 80 00 00 00	 mov	 eax, 128		; 00000080H

; 34   : }

  00093	48 81 c4 a8 02
	00 00		 add	 rsp, 680		; 000002a8H
  0009a	41 5c		 pop	 r12
  0009c	5d		 pop	 rbp
  0009d	c3		 ret	 0
$LN2@DriverEntr:
  0009e	48 89 9c 24 c0
	02 00 00	 mov	 QWORD PTR [rsp+704], rbx

; 17   : 	core_hook::fptr_addr = system::find_pattern(win32k, XORS("\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x06\xFF\x15\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x28\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x06\xFF\x15\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x28\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x08\xFF\x15\x00\x00\x00\x00\xEB\x05\xB8\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x28\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x06\xFF\x15\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x28\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x06\xFF\x15\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x28\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x06\xFF\x15\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x28\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x06\xFF\x15\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x38"), XORS("xxx????xxxxxxx????xxxxxxxxxxxxxxxxxxxxx????xxxxxxx????xxxxxxxxxxxxxxxxxxxxx????xxxxxxx????xxx????xxxxxxxxxxxxxxxxxxxxxx????xxxxxxx????xxxxxxxxxxxxxxxxxxxxx????xxxxxxx????xxxxxxxxxxxxxxxxxxxxx????xxxxxxx????xxxxxxxxxxxxxxxxxxxxx????xxxxxxx????xxxxxxxxxxxxxxxxxx"));

  000a6	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T4[rsp]
  000ab	48 89 b4 24 c8
	02 00 00	 mov	 QWORD PTR [rsp+712], rsi
  000b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?crypted@?1???R<lambda_96b242c342b240ccc20b98338cb7aace>@@QEBA@XZ@4V?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@B
  000ba	41 b9 02 00 00
	00		 mov	 r9d, 2
  000c0	4c 89 b4 24 98
	02 00 00	 mov	 QWORD PTR [rsp+664], r14
  000c8	4c 89 bc 24 90
	02 00 00	 mov	 QWORD PTR [rsp+656], r15
  000d0	41 8b c1	 mov	 eax, r9d
  000d3	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL126@DriverEntr:
  000e0	48 8d 89 80 00
	00 00		 lea	 rcx, QWORD PTR [rcx+128]
  000e7	0f 10 02	 movups	 xmm0, XMMWORD PTR [rdx]
  000ea	0f 10 4a 10	 movups	 xmm1, XMMWORD PTR [rdx+16]
  000ee	48 8d 92 80 00
	00 00		 lea	 rdx, QWORD PTR [rdx+128]
  000f5	0f 11 41 80	 movups	 XMMWORD PTR [rcx-128], xmm0
  000f9	0f 10 42 a0	 movups	 xmm0, XMMWORD PTR [rdx-96]
  000fd	0f 11 49 90	 movups	 XMMWORD PTR [rcx-112], xmm1
  00101	0f 10 4a b0	 movups	 xmm1, XMMWORD PTR [rdx-80]
  00105	0f 11 41 a0	 movups	 XMMWORD PTR [rcx-96], xmm0
  00109	0f 10 42 c0	 movups	 xmm0, XMMWORD PTR [rdx-64]
  0010d	0f 11 49 b0	 movups	 XMMWORD PTR [rcx-80], xmm1
  00111	0f 10 4a d0	 movups	 xmm1, XMMWORD PTR [rdx-48]
  00115	0f 11 41 c0	 movups	 XMMWORD PTR [rcx-64], xmm0
  00119	0f 10 42 e0	 movups	 xmm0, XMMWORD PTR [rdx-32]
  0011d	0f 11 49 d0	 movups	 XMMWORD PTR [rcx-48], xmm1
  00121	0f 10 4a f0	 movups	 xmm1, XMMWORD PTR [rdx-16]
  00125	0f 11 41 e0	 movups	 XMMWORD PTR [rcx-32], xmm0
  00129	0f 11 49 f0	 movups	 XMMWORD PTR [rcx-16], xmm1
  0012d	48 83 e8 01	 sub	 rax, 1
  00131	75 ad		 jne	 SHORT $LL126@DriverEntr
  00133	8b 02		 mov	 eax, DWORD PTR [rdx]
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\driver\xorstr.h

; 123  : 			for (int i = 0; i < _size; i++)

  00135	45 33 c0	 xor	 r8d, r8d
  00138	44 39 0d 00 00
	00 00		 cmp	 DWORD PTR __isa_available, r9d
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\main.cpp

; 17   : 	core_hook::fptr_addr = system::find_pattern(win32k, XORS("\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x06\xFF\x15\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x28\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x06\xFF\x15\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x28\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x08\xFF\x15\x00\x00\x00\x00\xEB\x05\xB8\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x28\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x06\xFF\x15\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x28\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x06\xFF\x15\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x28\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x06\xFF\x15\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x28\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x06\xFF\x15\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x38"), XORS("xxx????xxxxxxx????xxxxxxxxxxxxxxxxxxxxx????xxxxxxx????xxxxxxxxxxxxxxxxxxxxx????xxxxxxx????xxx????xxxxxxxxxxxxxxxxxxxxxx????xxxxxxx????xxxxxxxxxxxxxxxxxxxxx????xxxxxxx????xxxxxxxxxxxxxxxxxxxxx????xxxxxxx????xxxxxxxxxxxxxxxxxxxxx????xxxxxxx????xxxxxxxxxxxxxxxxxx"));

  0013f	89 01		 mov	 DWORD PTR [rcx], eax
  00141	0f b6 42 04	 movzx	 eax, BYTE PTR [rdx+4]
  00145	0f 29 b4 24 80
	02 00 00	 movaps	 XMMWORD PTR [rsp+640], xmm6
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\driver\xorstr.h

; 123  : 			for (int i = 0; i < _size; i++)

  0014d	41 8d 58 1f	 lea	 ebx, QWORD PTR [r8+31]
  00151	0f 29 bc 24 70
	02 00 00	 movaps	 XMMWORD PTR [rsp+624], xmm7
  00159	45 8d 58 05	 lea	 r11d, QWORD PTR [r8+5]
  0015d	44 0f 29 84 24
	60 02 00 00	 movaps	 XMMWORD PTR [rsp+608], xmm8
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\main.cpp

; 17   : 	core_hook::fptr_addr = system::find_pattern(win32k, XORS("\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x06\xFF\x15\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x28\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x06\xFF\x15\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x28\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x08\xFF\x15\x00\x00\x00\x00\xEB\x05\xB8\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x28\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x06\xFF\x15\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x28\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x06\xFF\x15\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x28\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x06\xFF\x15\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x28\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x06\xFF\x15\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x38"), XORS("xxx????xxxxxxx????xxxxxxxxxxxxxxxxxxxxx????xxxxxxx????xxxxxxxxxxxxxxxxxxxxx????xxxxxxx????xxx????xxxxxxxxxxxxxxxxxxxxxx????xxxxxxx????xxxxxxxxxxxxxxxxxxxxx????xxxxxxx????xxxxxxxxxxxxxxxxxxxxx????xxxxxxx????xxxxxxxxxxxxxxxxxxxxx????xxxxxxx????xxxxxxxxxxxxxxxxxx"));

  00166	88 41 04	 mov	 BYTE PTR [rcx+4], al
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\driver\xorstr.h

; 123  : 			for (int i = 0; i < _size; i++)

  00169	0f 8c bb 01 00
	00		 jl	 $LN119@DriverEntr
  0016f	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@37373737373737373737373737373737
  00177	48 8d 4c 24 54	 lea	 rcx, QWORD PTR $T4[rsp+4]
  0017c	66 0f 6f 2d 00
	00 00 00	 movdqa	 xmm5, XMMWORD PTR __xmm@00000003000000020000000100000000
  00184	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@92492493924924939249249392492493
  0018c	66 0f 6f 3d 00
	00 00 00	 movdqa	 xmm7, XMMWORD PTR __xmm@00000038000000380000003800000038
  00194	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  0019a	8b 54 24 40	 mov	 edx, DWORD PTR $T3[rsp]
  0019e	66 41 0f 6e f3	 movd	 xmm6, r11d
  001a3	66 44 0f 6e c3	 movd	 xmm8, ebx
  001a8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL31@DriverEntr:

; 125  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  001b0	66 41 0f 6e d0	 movd	 xmm2, r8d
  001b5	41 8d 40 04	 lea	 eax, DWORD PTR [r8+4]
  001b9	66 0f 70 d2 00	 pshufd	 xmm2, xmm2, 0
  001be	48 8d 49 08	 lea	 rcx, QWORD PTR [rcx+8]
  001c2	66 0f fe d5	 paddd	 xmm2, xmm5
  001c6	66 0f 6e d8	 movd	 xmm3, eax
  001ca	66 0f 6f ca	 movdqa	 xmm1, xmm2
  001ce	66 0f 70 db 00	 pshufd	 xmm3, xmm3, 0
  001d3	66 0f 62 ca	 punpckldq xmm1, xmm2
  001d7	66 0f 6f c2	 movdqa	 xmm0, xmm2
  001db	66 0f 6a c2	 punpckhdq xmm0, xmm2
  001df	66 0f fe dd	 paddd	 xmm3, xmm5
  001e3	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  001e8	41 83 c0 08	 add	 r8d, 8
  001ec	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  001f1	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  001f5	66 0f fe ca	 paddd	 xmm1, xmm2
  001f9	66 0f e2 ce	 psrad	 xmm1, xmm6
  001fd	66 0f 6f c1	 movdqa	 xmm0, xmm1
  00201	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  00206	66 0f fe c1	 paddd	 xmm0, xmm1
  0020a	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  0020f	66 0f fa d0	 psubd	 xmm2, xmm0
  00213	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  00218	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0021d	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00222	66 0f 6f cb	 movdqa	 xmm1, xmm3
  00226	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  0022e	66 0f 67 d2	 packuswb xmm2, xmm2
  00232	66 0f 62 cb	 punpckldq xmm1, xmm3
  00236	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  0023b	66 0f 6e c2	 movd	 xmm0, edx
  0023f	66 0f fc d0	 paddb	 xmm2, xmm0
  00243	66 0f 6e 41 f4	 movd	 xmm0, DWORD PTR [rcx-12]
  00248	66 0f ef d0	 pxor	 xmm2, xmm0
  0024c	66 0f 6f c3	 movdqa	 xmm0, xmm3
  00250	66 0f 6a c3	 punpckhdq xmm0, xmm3
  00254	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00259	66 0f 7e 51 f4	 movd	 DWORD PTR [rcx-12], xmm2
  0025e	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  00262	66 0f fe cb	 paddd	 xmm1, xmm3
  00266	66 0f e2 ce	 psrad	 xmm1, xmm6
  0026a	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0026e	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  00273	66 0f fe c1	 paddd	 xmm0, xmm1
  00277	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  0027c	66 0f fa d8	 psubd	 xmm3, xmm0
  00280	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  00285	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0028a	66 0f 6e c2	 movd	 xmm0, edx
  0028e	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00293	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  0029b	66 0f 67 d2	 packuswb xmm2, xmm2
  0029f	66 0f fc d0	 paddb	 xmm2, xmm0
  002a3	66 0f 6e 41 f8	 movd	 xmm0, DWORD PTR [rcx-8]
  002a8	66 0f ef d0	 pxor	 xmm2, xmm0
  002ac	66 0f 7e 51 f8	 movd	 DWORD PTR [rcx-8], xmm2
  002b1	41 81 f8 00 01
	00 00		 cmp	 r8d, 256		; 00000100H
  002b8	0f 8c f2 fe ff
	ff		 jl	 $LL31@DriverEntr

; 123  : 			for (int i = 0; i < _size; i++)

  002be	41 81 f8 05 01
	00 00		 cmp	 r8d, 261		; 00000105H
  002c5	7c 63		 jl	 SHORT $LN119@DriverEntr
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\main.cpp

; 17   : 	core_hook::fptr_addr = system::find_pattern(win32k, XORS("\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x06\xFF\x15\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x28\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x06\xFF\x15\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x28\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x08\xFF\x15\x00\x00\x00\x00\xEB\x05\xB8\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x28\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x06\xFF\x15\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x28\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x06\xFF\x15\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x28\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x06\xFF\x15\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x28\x48\x8B\x05\x00\x00\x00\x00\x48\x85\xC0\x74\x06\xFF\x15\x00\x00\x00\x00\x48\x83\xC4\x28\xC3\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC\x48\x83\xEC\x38"), XORS("xxx????xxxxxxx????xxxxxxxxxxxxxxxxxxxxx????xxxxxxx????xxxxxxxxxxxxxxxxxxxxx????xxxxxxx????xxx????xxxxxxxxxxxxxxxxxxxxxx????xxxxxxx????xxxxxxxxxxxxxxxxxxxxx????xxxxxxx????xxxxxxxxxxxxxxxxxxxxx????xxxxxxx????xxxxxxxxxxxxxxxxxxxxx????xxxxxxx????xxxxxxxxxxxxxxxxxx"));

  002c7	48 8d 55 55	 lea	 rdx, QWORD PTR $T5[rbp-256]
  002cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?crypted@?1???R<lambda_44f8de2005997dbbdec1c0f27538620f>@@QEBA@XZ@4V?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@B
$LL125@DriverEntr:
  002d2	48 8d 92 80 00
	00 00		 lea	 rdx, QWORD PTR [rdx+128]
  002d9	0f 10 01	 movups	 xmm0, XMMWORD PTR [rcx]
  002dc	0f 10 49 10	 movups	 xmm1, XMMWORD PTR [rcx+16]
  002e0	48 8d 89 80 00
	00 00		 lea	 rcx, QWORD PTR [rcx+128]
  002e7	0f 11 42 80	 movups	 XMMWORD PTR [rdx-128], xmm0
  002eb	0f 10 41 a0	 movups	 xmm0, XMMWORD PTR [rcx-96]
  002ef	0f 11 4a 90	 movups	 XMMWORD PTR [rdx-112], xmm1
  002f3	0f 10 49 b0	 movups	 xmm1, XMMWORD PTR [rcx-80]
  002f7	0f 11 42 a0	 movups	 XMMWORD PTR [rdx-96], xmm0
  002fb	0f 10 41 c0	 movups	 xmm0, XMMWORD PTR [rcx-64]
  002ff	0f 11 4a b0	 movups	 XMMWORD PTR [rdx-80], xmm1
  00303	0f 10 49 d0	 movups	 xmm1, XMMWORD PTR [rcx-48]
  00307	0f 11 42 c0	 movups	 XMMWORD PTR [rdx-64], xmm0
  0030b	0f 10 41 e0	 movups	 xmm0, XMMWORD PTR [rcx-32]
  0030f	0f 11 4a d0	 movups	 XMMWORD PTR [rdx-48], xmm1
  00313	0f 10 49 f0	 movups	 xmm1, XMMWORD PTR [rcx-16]
  00317	0f 11 42 e0	 movups	 XMMWORD PTR [rdx-32], xmm0
  0031b	0f 11 4a f0	 movups	 XMMWORD PTR [rdx-16], xmm1
  0031f	49 83 e9 01	 sub	 r9, 1
  00323	75 ad		 jne	 SHORT $LL125@DriverEntr
  00325	e9 ab 00 00 00	 jmp	 $LN152@DriverEntr
$LN119@DriverEntr:
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\driver\xorstr.h

; 123  : 			for (int i = 0; i < _size; i++)

  0032a	49 63 c0	 movsxd	 rax, r8d
  0032d	4c 8d 54 24 50	 lea	 r10, QWORD PTR $T4[rsp]
  00332	4c 03 d0	 add	 r10, rax
  00335	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL81@DriverEntr:

; 125  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00340	b8 93 24 49 92	 mov	 eax, -1840700269	; ffffffff92492493H
  00345	4d 8d 52 01	 lea	 r10, QWORD PTR [r10+1]
  00349	41 f7 e8	 imul	 r8d
  0034c	41 03 d0	 add	 edx, r8d
  0034f	c1 fa 05	 sar	 edx, 5
  00352	8b c2		 mov	 eax, edx
  00354	c1 e8 1f	 shr	 eax, 31
  00357	03 d0		 add	 edx, eax
  00359	0f be c2	 movsx	 eax, dl
  0035c	6b c8 38	 imul	 ecx, eax, 56		; 00000038H
  0035f	41 0f b6 c0	 movzx	 eax, r8b
  00363	41 ff c0	 inc	 r8d
  00366	2a c1		 sub	 al, cl
  00368	04 37		 add	 al, 55			; 00000037H
  0036a	41 30 42 ff	 xor	 BYTE PTR [r10-1], al
  0036e	41 81 f8 05 01
	00 00		 cmp	 r8d, 261		; 00000105H
  00375	7c c9		 jl	 SHORT $LL81@DriverEntr
  00377	48 8d 55 55	 lea	 rdx, QWORD PTR $T5[rbp-256]
  0037b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?crypted@?1???R<lambda_44f8de2005997dbbdec1c0f27538620f>@@QEBA@XZ@4V?$xorcrypt@$0BAF@$0DH@$0DH@D@xorcrypt@@B
$LL124@DriverEntr:
  00382	48 8d 92 80 00
	00 00		 lea	 rdx, QWORD PTR [rdx+128]
  00389	0f 10 01	 movups	 xmm0, XMMWORD PTR [rcx]
  0038c	0f 10 49 10	 movups	 xmm1, XMMWORD PTR [rcx+16]
  00390	48 8d 89 80 00
	00 00		 lea	 rcx, QWORD PTR [rcx+128]
  00397	0f 11 42 80	 movups	 XMMWORD PTR [rdx-128], xmm0
  0039b	0f 10 41 a0	 movups	 xmm0, XMMWORD PTR [rcx-96]
  0039f	0f 11 4a 90	 movups	 XMMWORD PTR [rdx-112], xmm1
  003a3	0f 10 49 b0	 movups	 xmm1, XMMWORD PTR [rcx-80]
  003a7	0f 11 42 a0	 movups	 XMMWORD PTR [rdx-96], xmm0
  003ab	0f 10 41 c0	 movups	 xmm0, XMMWORD PTR [rcx-64]
  003af	0f 11 4a b0	 movups	 XMMWORD PTR [rdx-80], xmm1
  003b3	0f 10 49 d0	 movups	 xmm1, XMMWORD PTR [rcx-48]
  003b7	0f 11 42 c0	 movups	 XMMWORD PTR [rdx-64], xmm0
  003bb	0f 10 41 e0	 movups	 xmm0, XMMWORD PTR [rcx-32]
  003bf	0f 11 4a d0	 movups	 XMMWORD PTR [rdx-48], xmm1
  003c3	0f 10 49 f0	 movups	 xmm1, XMMWORD PTR [rcx-16]
  003c7	0f 11 42 e0	 movups	 XMMWORD PTR [rdx-32], xmm0
  003cb	0f 11 4a f0	 movups	 XMMWORD PTR [rdx-16], xmm1
  003cf	49 83 e9 01	 sub	 r9, 1
  003d3	75 ad		 jne	 SHORT $LL124@DriverEntr
$LN152@DriverEntr:

; 123  : 			for (int i = 0; i < _size; i++)

  003d5	8b 01		 mov	 eax, DWORD PTR [rcx]
  003d7	45 33 c0	 xor	 r8d, r8d
  003da	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR __isa_available, 2
  003e1	89 02		 mov	 DWORD PTR [rdx], eax
  003e3	0f b6 41 04	 movzx	 eax, BYTE PTR [rcx+4]
  003e7	88 42 04	 mov	 BYTE PTR [rdx+4], al
  003ea	0f 8c 57 01 00
	00		 jl	 $LN117@DriverEntr
  003f0	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@37373737373737373737373737373737
  003f8	48 8d 4d 59	 lea	 rcx, QWORD PTR $T5[rbp-252]
  003fc	66 0f 6f 2d 00
	00 00 00	 movdqa	 xmm5, XMMWORD PTR __xmm@00000003000000020000000100000000
  00404	66 0f 6f 25 00
	00 00 00	 movdqa	 xmm4, XMMWORD PTR __xmm@92492493924924939249249392492493
  0040c	66 0f 6f 3d 00
	00 00 00	 movdqa	 xmm7, XMMWORD PTR __xmm@00000038000000380000003800000038
  00414	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  0041a	8b 54 24 40	 mov	 edx, DWORD PTR $T3[rsp]
  0041e	66 41 0f 6e f3	 movd	 xmm6, r11d
  00423	66 44 0f 6e c3	 movd	 xmm8, ebx
  00428	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL45@DriverEntr:

; 125  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00430	66 41 0f 6e d0	 movd	 xmm2, r8d
  00435	41 8d 40 04	 lea	 eax, DWORD PTR [r8+4]
  00439	66 0f 70 d2 00	 pshufd	 xmm2, xmm2, 0
  0043e	48 8d 49 08	 lea	 rcx, QWORD PTR [rcx+8]
  00442	66 0f fe d5	 paddd	 xmm2, xmm5
  00446	66 0f 6e d8	 movd	 xmm3, eax
  0044a	66 0f 6f ca	 movdqa	 xmm1, xmm2
  0044e	66 0f 70 db 00	 pshufd	 xmm3, xmm3, 0
  00453	66 0f 62 ca	 punpckldq xmm1, xmm2
  00457	66 0f 6f c2	 movdqa	 xmm0, xmm2
  0045b	66 0f 6a c2	 punpckhdq xmm0, xmm2
  0045f	66 0f fe dd	 paddd	 xmm3, xmm5
  00463	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  00468	41 83 c0 08	 add	 r8d, 8
  0046c	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  00471	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  00475	66 0f fe ca	 paddd	 xmm1, xmm2
  00479	66 0f e2 ce	 psrad	 xmm1, xmm6
  0047d	66 0f 6f c1	 movdqa	 xmm0, xmm1
  00481	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  00486	66 0f fe c1	 paddd	 xmm0, xmm1
  0048a	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  0048f	66 0f fa d0	 psubd	 xmm2, xmm0
  00493	f2 0f 70 c2 d8	 pshuflw xmm0, xmm2, 216		; 000000d8H
  00498	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0049d	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  004a2	66 0f 6f cb	 movdqa	 xmm1, xmm3
  004a6	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  004ae	66 0f 67 d2	 packuswb xmm2, xmm2
  004b2	66 0f 62 cb	 punpckldq xmm1, xmm3
  004b6	66 0f 38 28 cc	 pmuldq	 xmm1, xmm4
  004bb	66 0f 6e c2	 movd	 xmm0, edx
  004bf	66 0f fc d0	 paddb	 xmm2, xmm0
  004c3	66 0f 6e 41 f4	 movd	 xmm0, DWORD PTR [rcx-12]
  004c8	66 0f ef d0	 pxor	 xmm2, xmm0
  004cc	66 0f 6f c3	 movdqa	 xmm0, xmm3
  004d0	66 0f 6a c3	 punpckhdq xmm0, xmm3
  004d4	66 0f 38 28 c4	 pmuldq	 xmm0, xmm4
  004d9	66 0f 7e 51 f4	 movd	 DWORD PTR [rcx-12], xmm2
  004de	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  004e2	66 0f fe cb	 paddd	 xmm1, xmm3
  004e6	66 0f e2 ce	 psrad	 xmm1, xmm6
  004ea	66 0f 6f c1	 movdqa	 xmm0, xmm1
  004ee	66 41 0f d2 c0	 psrld	 xmm0, xmm8
  004f3	66 0f fe c1	 paddd	 xmm0, xmm1
  004f7	66 0f 38 40 c7	 pmulld	 xmm0, xmm7
  004fc	66 0f fa d8	 psubd	 xmm3, xmm0
  00500	f2 0f 70 c3 d8	 pshuflw xmm0, xmm3, 216		; 000000d8H
  00505	f3 0f 70 c8 d8	 pshufhw xmm1, xmm0, 216		; 000000d8H
  0050a	66 0f 6e c2	 movd	 xmm0, edx
  0050e	66 0f 70 d1 d8	 pshufd	 xmm2, xmm1, 216		; 000000d8H
  00513	66 0f db 15 00
	00 00 00	 pand	 xmm2, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
  0051b	66 0f 67 d2	 packuswb xmm2, xmm2
  0051f	66 0f fc d0	 paddb	 xmm2, xmm0
  00523	66 0f 6e 41 f8	 movd	 xmm0, DWORD PTR [rcx-8]
  00528	66 0f ef d0	 pxor	 xmm2, xmm0
  0052c	66 0f 7e 51 f8	 movd	 DWORD PTR [rcx-8], xmm2
  00531	41 81 f8 00 01
	00 00		 cmp	 r8d, 256		; 00000100H
  00538	0f 8c f2 fe ff
	ff		 jl	 $LL45@DriverEntr

; 123  : 			for (int i = 0; i < _size; i++)

  0053e	41 81 f8 05 01
	00 00		 cmp	 r8d, 261		; 00000105H
  00545	7d 41		 jge	 SHORT $LN44@DriverEntr
$LN117@DriverEntr:
  00547	49 63 c0	 movsxd	 rax, r8d
  0054a	4c 8d 4d 55	 lea	 r9, QWORD PTR $T5[rbp-256]
  0054e	4c 03 c8	 add	 r9, rax
$LL83@DriverEntr:

; 125  : 				_storage[i] = data[i] ^ (_key1 + i % (1 + _key2));

  00551	b8 93 24 49 92	 mov	 eax, -1840700269	; ffffffff92492493H
  00556	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
  0055a	41 f7 e8	 imul	 r8d
  0055d	41 03 d0	 add	 edx, r8d
  00560	c1 fa 05	 sar	 edx, 5
  00563	8b c2		 mov	 eax, edx
  00565	c1 e8 1f	 shr	 eax, 31
  00568	03 d0		 add	 edx, eax
  0056a	0f be c2	 movsx	 eax, dl
  0056d	6b c8 38	 imul	 ecx, eax, 56		; 00000038H
  00570	41 0f b6 c0	 movzx	 eax, r8b
  00574	41 ff c0	 inc	 r8d
  00577	2a c1		 sub	 al, cl
  00579	04 37		 add	 al, 55			; 00000037H
  0057b	41 30 41 ff	 xor	 BYTE PTR [r9-1], al
  0057f	41 81 f8 05 01
	00 00		 cmp	 r8d, 261		; 00000105H
  00586	7c c9		 jl	 SHORT $LL83@DriverEntr
$LN44@DriverEntr:
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\system\funcs.h

; 42   : 		const PIMAGE_NT_HEADERS headers = (PIMAGE_NT_HEADERS)(base + ((PIMAGE_DOS_HEADER)base)->e_lfanew);

  00588	49 63 4c 24 3c	 movsxd	 rcx, DWORD PTR [r12+60]

; 43   : 		const PIMAGE_SECTION_HEADER sections = IMAGE_FIRST_SECTION(headers);
; 44   : 
; 45   : 		for (size_t i = 0; i < headers->FileHeader.NumberOfSections; i++)

  0058d	33 f6		 xor	 esi, esi
  0058f	49 03 cc	 add	 rcx, r12
  00592	48 89 bc 24 d0
	02 00 00	 mov	 QWORD PTR [rsp+720], rdi
  0059a	4c 89 ac 24 a0
	02 00 00	 mov	 QWORD PTR [rsp+672], r13
  005a2	44 0f 28 84 24
	60 02 00 00	 movaps	 xmm8, XMMWORD PTR [rsp+608]
  005ab	0f 28 bc 24 70
	02 00 00	 movaps	 xmm7, XMMWORD PTR [rsp+624]
  005b3	44 0f b7 71 14	 movzx	 r14d, WORD PTR [rcx+20]
  005b8	44 0f b7 79 06	 movzx	 r15d, WORD PTR [rcx+6]
  005bd	4c 03 f1	 add	 r14, rcx
  005c0	0f 28 b4 24 80
	02 00 00	 movaps	 xmm6, XMMWORD PTR [rsp+640]
  005c8	4d 85 ff	 test	 r15, r15
  005cb	0f 84 a0 00 00
	00		 je	 $LN121@DriverEntr

; 42   : 		const PIMAGE_NT_HEADERS headers = (PIMAGE_NT_HEADERS)(base + ((PIMAGE_DOS_HEADER)base)->e_lfanew);

  005d1	44 0f b6 5c 24
	50		 movzx	 r11d, BYTE PTR $T4[rsp]
  005d7	33 ff		 xor	 edi, edi
  005d9	0f 1f 80 00 00
	00 00		 npad	 7
$LL50@DriverEntr:

; 46   : 		{
; 47   : 			const PIMAGE_SECTION_HEADER section = &sections[i];
; 48   : 
; 49   : 			if (section->Characteristics & IMAGE_SCN_MEM_EXECUTE)

  005e0	42 f7 44 37 3c
	00 00 00 20	 test	 DWORD PTR [rdi+r14+60], 536870912 ; 20000000H
  005e9	74 76		 je	 SHORT $LN48@DriverEntr

; 50   : 			{
; 51   : 				const auto match = find_pattern(base + section->VirtualAddress, section->Misc.VirtualSize, pattern, mask);

  005eb	46 8b 4c 37 24	 mov	 r9d, DWORD PTR [rdi+r14+36]

; 27   : 		range = range - strlen(mask);

  005f0	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T4[rsp]

; 51   : 				const auto match = find_pattern(base + section->VirtualAddress, section->Misc.VirtualSize, pattern, mask);

  005f5	4d 03 cc	 add	 r9, r12

; 27   : 		range = range - strlen(mask);

  005f8	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  005ff	90		 npad	 1
$LL123@DriverEntr:
  00600	48 ff c0	 inc	 rax
  00603	80 3c 01 00	 cmp	 BYTE PTR [rcx+rax], 0
  00607	75 f7		 jne	 SHORT $LL123@DriverEntr

; 51   : 				const auto match = find_pattern(base + section->VirtualAddress, section->Misc.VirtualSize, pattern, mask);

  00609	42 8b 5c 37 20	 mov	 ebx, DWORD PTR [rdi+r14+32]

; 29   : 		for (size_t i = 0; i < range; ++i)

  0060e	41 ba 00 00 00
	00		 mov	 r10d, 0
  00614	48 2b d8	 sub	 rbx, rax
  00617	74 48		 je	 SHORT $LN48@DriverEntr
  00619	0f 1f 80 00 00
	00 00		 npad	 7
$LL57@DriverEntr:

; 30   : 		{
; 31   : 			if (check_mask((const char*)base + i, pattern, mask))

  00620	48 8d 55 55	 lea	 rdx, QWORD PTR $T5[rbp-256]

; 16   : 			for (; *mask; ++base, ++pattern, ++mask)

  00624	45 84 db	 test	 r11b, r11b
  00627	74 33		 je	 SHORT $LN73@DriverEntr

; 53   : 				if (match)

  00629	4c 8d 6c 24 50	 lea	 r13, QWORD PTR $T4[rsp]
  0062e	4d 8b c1	 mov	 r8, r9
  00631	4d 2b c5	 sub	 r8, r13
  00634	48 8d 44 24 50	 lea	 rax, QWORD PTR $T4[rsp]
  00639	41 0f b6 cb	 movzx	 ecx, r11b
  0063d	0f 1f 00	 npad	 3
$LL63@DriverEntr:

; 18   : 				if (*mask == 'x' && *base != *pattern)

  00640	80 f9 78	 cmp	 cl, 120			; 00000078H
  00643	75 09		 jne	 SHORT $LN61@DriverEntr
  00645	0f b6 0a	 movzx	 ecx, BYTE PTR [rdx]
  00648	42 38 0c 00	 cmp	 BYTE PTR [rax+r8], cl
  0064c	75 6e		 jne	 SHORT $LN72@DriverEntr
$LN61@DriverEntr:

; 16   : 			for (; *mask; ++base, ++pattern, ++mask)

  0064e	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  00652	48 ff c0	 inc	 rax
  00655	48 ff c2	 inc	 rdx
  00658	84 c9		 test	 cl, cl
  0065a	75 e4		 jne	 SHORT $LL63@DriverEntr
$LN73@DriverEntr:

; 53   : 				if (match)

  0065c	4d 85 c9	 test	 r9, r9
  0065f	75 6c		 jne	 SHORT $LN74@DriverEntr
$LN48@DriverEntr:

; 43   : 		const PIMAGE_SECTION_HEADER sections = IMAGE_FIRST_SECTION(headers);
; 44   : 
; 45   : 		for (size_t i = 0; i < headers->FileHeader.NumberOfSections; i++)

  00661	48 ff c6	 inc	 rsi
  00664	48 83 c7 28	 add	 rdi, 40			; 00000028H
  00668	49 3b f7	 cmp	 rsi, r15
  0066b	0f 82 6f ff ff
	ff		 jb	 $LL50@DriverEntr
$LN121@DriverEntr:

; 56   : 				}
; 57   : 			}
; 58   : 		}
; 59   : 
; 60   : 		return 0;

  00671	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR ?fptr_addr@core_hook@@3_KA, 0 ; core_hook::fptr_addr
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\main.cpp

; 22   : 		return STATUS_UNSUCCESSFUL;

  0067c	b8 01 00 00 c0	 mov	 eax, -1073741823	; ffffffffc0000001H
$LN151@DriverEntr:
  00681	4c 8b ac 24 a0
	02 00 00	 mov	 r13, QWORD PTR [rsp+672]
  00689	48 8b bc 24 d0
	02 00 00	 mov	 rdi, QWORD PTR [rsp+720]
  00691	4c 8b b4 24 98
	02 00 00	 mov	 r14, QWORD PTR [rsp+664]
  00699	48 8b b4 24 c8
	02 00 00	 mov	 rsi, QWORD PTR [rsp+712]
  006a1	48 8b 9c 24 c0
	02 00 00	 mov	 rbx, QWORD PTR [rsp+704]
  006a9	4c 8b bc 24 90
	02 00 00	 mov	 r15, QWORD PTR [rsp+656]

; 34   : }

  006b1	48 81 c4 a8 02
	00 00		 add	 rsp, 680		; 000002a8H
  006b8	41 5c		 pop	 r12
  006ba	5d		 pop	 rbp
  006bb	c3		 ret	 0
$LN72@DriverEntr:
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\system\funcs.h

; 29   : 		for (size_t i = 0; i < range; ++i)

  006bc	49 ff c2	 inc	 r10
  006bf	49 ff c1	 inc	 r9
  006c2	4c 3b d3	 cmp	 r10, rbx
  006c5	0f 82 55 ff ff
	ff		 jb	 $LL57@DriverEntr

; 18   : 				if (*mask == 'x' && *base != *pattern)

  006cb	eb 94		 jmp	 SHORT $LN48@DriverEntr
$LN74@DriverEntr:

; 55   : 					return match;

  006cd	4c 89 0d 00 00
	00 00		 mov	 QWORD PTR ?fptr_addr@core_hook@@3_KA, r9 ; core_hook::fptr_addr
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\main.cpp

; 30   : 	*(void**)&core_hook::o_function_qword_1 = InterlockedExchangePointer((void**)dereference(core_hook::fptr_addr), (void*)core_hook::hooked_fptr);

  006d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hooked_fptr@core_hook@@YA_JPEAX@Z ; core_hook::hooked_fptr
  006db	49 63 41 03	 movsxd	 rax, DWORD PTR [r9+3]
  006df	4a 87 4c 08 07	 xchg	 QWORD PTR [rax+r9+7], rcx
  006e4	48 89 0d 00 00
	00 00		 mov	 QWORD PTR ?o_function_qword_1@core_hook@@3P6A_JPEAX@ZEA, rcx ; core_hook::o_function_qword_1

; 31   : 	
; 32   : 	printf("driver successfully loaded.\n");
; 33   : 	return STATUS_SUCCESS;

  006eb	33 c0		 xor	 eax, eax
  006ed	eb 92		 jmp	 SHORT $LN151@DriverEntr
DriverEntry ENDP
_TEXT	ENDS
END
