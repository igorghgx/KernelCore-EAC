; Listing generated by Microsoft (R) Optimizing Compiler Version 19.36.32532.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	ExPoolZeroingNativelySupported
;	COMDAT ExPoolZeroingNativelySupported
_BSS	SEGMENT
ExPoolZeroingNativelySupported DB 01H DUP (?)
_BSS	ENDS
PUBLIC	?write_process_memory@memory@@YAJII_K00PEA_K@Z	; memory::write_process_memory
PUBLIC	?read_process_memory@memory@@YAJII_K00PEA_K@Z	; memory::read_process_memory
PUBLIC	?safe_copy@@YA_NPEAX0_KII@Z			; safe_copy
EXTRN	__imp_ObfDereferenceObject:PROC
EXTRN	MmCopyVirtualMemory:PROC
EXTRN	MmCopyVirtualMemory:PROC
EXTRN	?get_by_id@process@@YAPEAU_KPROCESS@@IPEAJ@Z:PROC ; process::get_by_id
;	COMDAT pdata
pdata	SEGMENT
$pdata$?write_process_memory@memory@@YAJII_K00PEA_K@Z DD imagerel $LN15
	DD	imagerel $LN15+237
	DD	imagerel $unwind$?write_process_memory@memory@@YAJII_K00PEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?read_process_memory@memory@@YAJII_K00PEA_K@Z DD imagerel $LN16
	DD	imagerel $LN16+195
	DD	imagerel $unwind$?read_process_memory@memory@@YAJII_K00PEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?safe_copy@@YA_NPEAX0_KII@Z DD imagerel $LN11
	DD	imagerel $LN11+184
	DD	imagerel $unwind$?safe_copy@@YA_NPEAX0_KII@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?safe_copy@@YA_NPEAX0_KII@Z DD 0c1a02H
	DD	06360603H
	DD	0f741aH
	DD	0e641aH
	DD	0d541aH
	DD	0c341aH
	DD	0e016921aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?read_process_memory@memory@@YAJII_K00PEA_K@Z DD 0c1a02H
	DD	06001603H
	DD	0f741aH
	DD	0e641aH
	DD	0d541aH
	DD	0c341aH
	DD	0e016921aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?write_process_memory@memory@@YAJII_K00PEA_K@Z DD 0c1802H
	DD	06001606H
	DD	0106418H
	DD	0f5418H
	DD	0e3418H
	DD	0f0149218H
	DD	07010e012H
xdata	ENDS
; Function compile flags: /Ogtp
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\memory\memory.cpp
;	COMDAT ?safe_copy@@YA_NPEAX0_KII@Z
_TEXT	SEGMENT
status$ = 64
bytes$ = 72
dst$ = 96
src$ = 104
size$ = 112
pid$ = 120
user_pid$ = 128
?safe_copy@@YA_NPEAX0_KII@Z PROC			; safe_copy, COMDAT

; 6    : {

$LN11:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 7    : 	SIZE_T bytes = 0;

  0001a	33 c0		 xor	 eax, eax
  0001c	48 8b ea	 mov	 rbp, rdx
  0001f	4c 8b f1	 mov	 r14, rcx
  00022	48 89 44 24 48	 mov	 QWORD PTR bytes$[rsp], rax

; 8    : 	NTSTATUS status = STATUS_SUCCESS;
; 9    : 	PEPROCESS user_proc = process::get_by_id(user_pid, &status);

  00027	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR user_pid$[rsp]
  0002e	48 8d 54 24 40	 lea	 rdx, QWORD PTR status$[rsp]
  00033	89 44 24 40	 mov	 DWORD PTR status$[rsp], eax
  00037	41 8b f1	 mov	 esi, r9d
  0003a	49 8b d8	 mov	 rbx, r8
  0003d	e8 00 00 00 00	 call	 ?get_by_id@process@@YAPEAU_KPROCESS@@IPEAJ@Z ; process::get_by_id

; 10   : 	if (!NT_SUCCESS(status)) return false;

  00042	83 7c 24 40 00	 cmp	 DWORD PTR status$[rsp], 0
  00047	48 8b f8	 mov	 rdi, rax
  0004a	7c 1c		 jl	 SHORT $LN4@safe_copy

; 11   : 	PEPROCESS target_proc = process::get_by_id(pid, &status);

  0004c	48 8d 54 24 40	 lea	 rdx, QWORD PTR status$[rsp]
  00051	8b ce		 mov	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?get_by_id@process@@YAPEAU_KPROCESS@@IPEAJ@Z ; process::get_by_id

; 12   : 	if (!NT_SUCCESS(status))

  00058	83 7c 24 40 00	 cmp	 DWORD PTR status$[rsp], 0
  0005d	7d 26		 jge	 SHORT $LN3@safe_copy

; 13   : 	{
; 14   : 		ObDereferenceObject(user_proc);

  0005f	48 8b cf	 mov	 rcx, rdi
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ObfDereferenceObject
$LN4@safe_copy:

; 19   : 	{
; 20   : 		return true;
; 21   : 	}
; 22   : 
; 23   : 	return false;
; 24   : }

  00068	32 c0		 xor	 al, al
$LN1@safe_copy:
  0006a	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  0006f	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  00074	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  00079	48 8b 7c 24 78	 mov	 rdi, QWORD PTR [rsp+120]
  0007e	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00082	41 5e		 pop	 r14
  00084	c3		 ret	 0
$LN3@safe_copy:

; 15   : 		return false;
; 16   : 	}
; 17   : 
; 18   : 	if (MmCopyVirtualMemory(user_proc, src, target_proc, dst, size, KernelMode, &bytes) == STATUS_SUCCESS && bytes == size)

  00085	48 8d 4c 24 48	 lea	 rcx, QWORD PTR bytes$[rsp]
  0008a	4d 8b ce	 mov	 r9, r14
  0008d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00092	4c 8b c0	 mov	 r8, rax
  00095	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  0009a	48 8b cf	 mov	 rcx, rdi
  0009d	48 8b d5	 mov	 rdx, rbp
  000a0	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  000a5	e8 00 00 00 00	 call	 MmCopyVirtualMemory
  000aa	85 c0		 test	 eax, eax
  000ac	75 ba		 jne	 SHORT $LN4@safe_copy
  000ae	48 39 5c 24 48	 cmp	 QWORD PTR bytes$[rsp], rbx
  000b3	0f 94 c0	 sete	 al
  000b6	eb b2		 jmp	 SHORT $LN1@safe_copy
?safe_copy@@YA_NPEAX0_KII@Z ENDP			; safe_copy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\memory\memory.cpp
;	COMDAT ?read_process_memory@memory@@YAJII_K00PEA_K@Z
_TEXT	SEGMENT
status$ = 64
processed$ = 72
pid$ = 96
user_pid$ = 104
addr$ = 112
buffer$ = 120
size$ = 128
bytes_read$ = 136
?read_process_memory@memory@@YAJII_K00PEA_K@Z PROC	; memory::read_process_memory, COMDAT

; 65   : {

$LN16:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0001a	8b c2		 mov	 eax, edx
  0001c	8b f9		 mov	 edi, ecx

; 66   : 	//if (!safe_copy((void*)addr, (void*)buffer, size, pid, user_pid))
; 67   : 	//{
; 68   : 	//	return STATUS_FAIL_CHECK;
; 69   : 	//}
; 70   : 
; 71   : 	//if (!addr || !pid || !buffer || !size)
; 72   : 	//{
; 73   : 	//	return 0;
; 74   : 	//}
; 75   : 
; 76   : 	NTSTATUS status = STATUS_SUCCESS;

  0001e	33 db		 xor	 ebx, ebx

; 77   : 
; 78   : 	PEPROCESS user_proc = process::get_by_id(user_pid, &status);

  00020	48 8d 54 24 40	 lea	 rdx, QWORD PTR status$[rsp]
  00025	8b c8		 mov	 ecx, eax
  00027	89 5c 24 40	 mov	 DWORD PTR status$[rsp], ebx
  0002b	49 8b f1	 mov	 rsi, r9
  0002e	49 8b e8	 mov	 rbp, r8
  00031	e8 00 00 00 00	 call	 ?get_by_id@process@@YAPEAU_KPROCESS@@IPEAJ@Z ; process::get_by_id
  00036	4c 8b f0	 mov	 r14, rax

; 79   : 	if (!NT_SUCCESS(status)) return status;

  00039	8b 44 24 40	 mov	 eax, DWORD PTR status$[rsp]
  0003d	85 c0		 test	 eax, eax
  0003f	78 67		 js	 SHORT $LN8@read_proce

; 80   : 	PEPROCESS target_proc = process::get_by_id(pid, &status);

  00041	48 8d 54 24 40	 lea	 rdx, QWORD PTR status$[rsp]
  00046	8b cf		 mov	 ecx, edi
  00048	e8 00 00 00 00	 call	 ?get_by_id@process@@YAPEAU_KPROCESS@@IPEAJ@Z ; process::get_by_id
  0004d	48 8b c8	 mov	 rcx, rax

; 81   : 	if (!NT_SUCCESS(status)) return status;

  00050	8b 44 24 40	 mov	 eax, DWORD PTR status$[rsp]
  00054	85 c0		 test	 eax, eax
  00056	78 50		 js	 SHORT $LN8@read_proce

; 82   : 
; 83   : 	size_t processed;
; 84   : 	status = memory::MmCopyVirtualMemory(target_proc, (void *)addr, user_proc, (void *)buffer, size, UserMode, &processed);

  00058	48 8b bc 24 80
	00 00 00	 mov	 rdi, QWORD PTR size$[rsp]
  00060	48 8d 44 24 48	 lea	 rax, QWORD PTR processed$[rsp]
  00065	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0006a	4c 8b ce	 mov	 r9, rsi
  0006d	c6 44 24 28 01	 mov	 BYTE PTR [rsp+40], 1
  00072	4d 8b c6	 mov	 r8, r14
  00075	48 8b d5	 mov	 rdx, rbp
  00078	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0007d	e8 00 00 00 00	 call	 MmCopyVirtualMemory

; 85   : 	if (!NT_SUCCESS(status)) return status;

  00082	85 c0		 test	 eax, eax
  00084	78 22		 js	 SHORT $LN8@read_proce

; 86   : 	if (bytes_read) *bytes_read = processed;

  00086	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR bytes_read$[rsp]
  0008e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR processed$[rsp]
  00093	48 85 c0	 test	 rax, rax
  00096	74 03		 je	 SHORT $LN5@read_proce
  00098	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN5@read_proce:

; 87   : 
; 88   : 	if (processed != size)

  0009b	b8 29 02 00 c0	 mov	 eax, -1073741271	; ffffffffc0000229H
  000a0	48 3b cf	 cmp	 rcx, rdi
  000a3	0f 45 d8	 cmovne	 ebx, eax
  000a6	8b c3		 mov	 eax, ebx
$LN8@read_proce:

; 89   : 		return STATUS_FAIL_CHECK;
; 90   : 	return STATUS_SUCCESS;
; 91   : }

  000a8	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  000ad	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  000b2	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  000b7	48 8b 7c 24 78	 mov	 rdi, QWORD PTR [rsp+120]
  000bc	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000c0	41 5e		 pop	 r14
  000c2	c3		 ret	 0
?read_process_memory@memory@@YAJII_K00PEA_K@Z ENDP	; memory::read_process_memory
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\memory\memory.cpp
;	COMDAT ?write_process_memory@memory@@YAJII_K00PEA_K@Z
_TEXT	SEGMENT
status$ = 64
processed$ = 72
pid$ = 112
user_pid$ = 120
addr$ = 128
buffer$ = 136
size$ = 144
bytes_written$ = 152
?write_process_memory@memory@@YAJII_K00PEA_K@Z PROC	; memory::write_process_memory, COMDAT

; 27   : {

$LN15:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 56		 push	 r14
  00012	41 57		 push	 r15
  00014	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00018	8b c2		 mov	 eax, edx
  0001a	8b f1		 mov	 esi, ecx

; 28   : 
; 29   : 	//if (!safe_copy((void*)addr, (void*)buffer, size, pid, user_pid))
; 30   : 	//{
; 31   : 	//	return STATUS_FAIL_CHECK;
; 32   : 	//}
; 33   : 
; 34   : 	//if (!addr || !pid || !buffer || !size)
; 35   : 	//{
; 36   : 	//	return 0;
; 37   : 	//}
; 38   : 
; 39   : 	NTSTATUS status = STATUS_SUCCESS;

  0001c	33 db		 xor	 ebx, ebx

; 40   : 
; 41   : 	PEPROCESS user_proc = process::get_by_id(user_pid, &status);

  0001e	48 8d 54 24 40	 lea	 rdx, QWORD PTR status$[rsp]
  00023	8b c8		 mov	 ecx, eax
  00025	89 5c 24 40	 mov	 DWORD PTR status$[rsp], ebx
  00029	4d 8b f1	 mov	 r14, r9
  0002c	4d 8b f8	 mov	 r15, r8
  0002f	e8 00 00 00 00	 call	 ?get_by_id@process@@YAPEAU_KPROCESS@@IPEAJ@Z ; process::get_by_id
  00034	48 8b f8	 mov	 rdi, rax

; 42   : 	if (!NT_SUCCESS(status)) return status;

  00037	8b 44 24 40	 mov	 eax, DWORD PTR status$[rsp]
  0003b	85 c0		 test	 eax, eax
  0003d	0f 88 8e 00 00
	00		 js	 $LN8@write_proc

; 43   : 	PEPROCESS target_proc = process::get_by_id(pid, &status);

  00043	48 8d 54 24 40	 lea	 rdx, QWORD PTR status$[rsp]
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?get_by_id@process@@YAPEAU_KPROCESS@@IPEAJ@Z ; process::get_by_id
  0004f	48 8b e8	 mov	 rbp, rax

; 44   : 	if (!NT_SUCCESS(status))

  00052	48 8b cf	 mov	 rcx, rdi
  00055	39 5c 24 40	 cmp	 DWORD PTR status$[rsp], ebx
  00059	7d 0c		 jge	 SHORT $LN3@write_proc

; 45   : 	{
; 46   : 		ObDereferenceObject(user_proc);

  0005b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ObfDereferenceObject

; 47   : 		return status;

  00061	8b 44 24 40	 mov	 eax, DWORD PTR status$[rsp]
  00065	eb 6a		 jmp	 SHORT $LN8@write_proc
$LN3@write_proc:

; 48   : 	}
; 49   : 
; 50   : 	size_t processed;
; 51   : 	status = memory::MmCopyVirtualMemory(user_proc, (void *)buffer, target_proc, (void *)addr, size, UserMode, &processed);

  00067	48 8b b4 24 90
	00 00 00	 mov	 rsi, QWORD PTR size$[rsp]
  0006f	48 8d 44 24 48	 lea	 rax, QWORD PTR processed$[rsp]
  00074	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00079	4d 8b cf	 mov	 r9, r15
  0007c	c6 44 24 28 01	 mov	 BYTE PTR [rsp+40], 1
  00081	4c 8b c5	 mov	 r8, rbp
  00084	49 8b d6	 mov	 rdx, r14
  00087	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0008c	e8 00 00 00 00	 call	 MmCopyVirtualMemory

; 52   : 
; 53   : 	ObDereferenceObject(user_proc);

  00091	48 8b cf	 mov	 rcx, rdi
  00094	89 44 24 40	 mov	 DWORD PTR status$[rsp], eax
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ObfDereferenceObject

; 54   : 	ObDereferenceObject(target_proc);

  0009e	48 8b cd	 mov	 rcx, rbp
  000a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ObfDereferenceObject

; 55   : 
; 56   : 	if (!NT_SUCCESS(status)) return status;

  000a7	8b 44 24 40	 mov	 eax, DWORD PTR status$[rsp]
  000ab	85 c0		 test	 eax, eax
  000ad	78 22		 js	 SHORT $LN8@write_proc

; 57   : 	if (bytes_written) *bytes_written = processed;

  000af	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR bytes_written$[rsp]
  000b7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR processed$[rsp]
  000bc	48 85 c0	 test	 rax, rax
  000bf	74 03		 je	 SHORT $LN5@write_proc
  000c1	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN5@write_proc:

; 58   : 
; 59   : 	if (processed != size)

  000c4	b8 29 02 00 c0	 mov	 eax, -1073741271	; ffffffffc0000229H
  000c9	48 3b ce	 cmp	 rcx, rsi
  000cc	0f 45 d8	 cmovne	 ebx, eax
  000cf	8b c3		 mov	 eax, ebx
$LN8@write_proc:

; 60   : 		return STATUS_FAIL_CHECK;
; 61   : 	return STATUS_SUCCESS;
; 62   : }

  000d1	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  000d6	48 8b 6c 24 78	 mov	 rbp, QWORD PTR [rsp+120]
  000db	48 8b b4 24 80
	00 00 00	 mov	 rsi, QWORD PTR [rsp+128]
  000e3	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000e7	41 5f		 pop	 r15
  000e9	41 5e		 pop	 r14
  000eb	5f		 pop	 rdi
  000ec	c3		 ret	 0
?write_process_memory@memory@@YAJII_K00PEA_K@Z ENDP	; memory::write_process_memory
_TEXT	ENDS
END
