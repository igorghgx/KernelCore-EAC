; Listing generated by Microsoft (R) Optimizing Compiler Version 19.36.32532.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	ExPoolZeroingNativelySupported
;	COMDAT ExPoolZeroingNativelySupported
_BSS	SEGMENT
ExPoolZeroingNativelySupported DB 01H DUP (?)
_BSS	ENDS
PUBLIC	?get_loaded_module@system@@YA_KPEBGPEAPEAU_LDR_DATA_TABLE_ENTRY@1@@Z ; system::get_loaded_module
PUBLIC	?get_system_module@system@@YA_KPEBG@Z		; system::get_system_module
PUBLIC	?get_routine_address@system@@YA_K_KPEBD@Z	; system::get_routine_address
EXTRN	__imp_RtlInitAnsiString:PROC
EXTRN	__imp_RtlInitUnicodeString:PROC
EXTRN	__imp_RtlUnicodeStringToAnsiString:PROC
EXTRN	__imp_RtlEqualUnicodeString:PROC
EXTRN	__imp_RtlFreeAnsiString:PROC
EXTRN	__imp_ExAllocatePool:PROC
EXTRN	__imp_ExFreePoolWithTag:PROC
EXTRN	__imp_RtlEqualString:PROC
EXTRN	ZwQuerySystemInformation:PROC
EXTRN	RtlFindExportedRoutineByName:PROC
EXTRN	memset:PROC
EXTRN	__imp_PsLoadedModuleList:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get_loaded_module@system@@YA_KPEBGPEAPEAU_LDR_DATA_TABLE_ENTRY@1@@Z DD imagerel $LN24
	DD	imagerel $LN24+153
	DD	imagerel $unwind$?get_loaded_module@system@@YA_KPEBGPEAPEAU_LDR_DATA_TABLE_ENTRY@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get_system_module@system@@YA_KPEBG@Z DD imagerel $LN45
	DD	imagerel $LN45+189
	DD	imagerel $unwind$?get_system_module@system@@YA_KPEBG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?get_system_module@system@@YA_KPEBG@Z DD imagerel $LN45+189
	DD	imagerel $LN45+540
	DD	imagerel $chain$0$?get_system_module@system@@YA_KPEBG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?get_system_module@system@@YA_KPEBG@Z DD imagerel $LN45+540
	DD	imagerel $LN45+570
	DD	imagerel $chain$1$?get_system_module@system@@YA_KPEBG@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?get_system_module@system@@YA_KPEBG@Z DD 020022H
	DD	06001602H
	DD	imagerel $LN45
	DD	imagerel $LN45+189
	DD	imagerel $unwind$?get_system_module@system@@YA_KPEBG@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?get_system_module@system@@YA_KPEBG@Z DD 040822H
	DD	06001602H
	DD	0323408H
	DD	imagerel $LN45
	DD	imagerel $LN45+189
	DD	imagerel $unwind$?get_system_module@system@@YA_KPEBG@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get_system_module@system@@YA_KPEBG@Z DD 050d02H
	DD	034640dH
	DD	030010dH
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get_loaded_module@system@@YA_KPEBGPEAPEAU_LDR_DATA_TABLE_ENTRY@1@@Z DD 060a02H
	DD	06191602H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
; Function compile flags: /Ogtp
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\system\sys_funcs.cpp
;	COMDAT ?get_routine_address@system@@YA_K_KPEBD@Z
_TEXT	SEGMENT
image$ = 8
name$ = 16
?get_routine_address@system@@YA_K_KPEBD@Z PROC		; system::get_routine_address, COMDAT

; 95   : 		if (!image || !name)

  00000	48 85 c9	 test	 rcx, rcx
  00003	74 09		 je	 SHORT $LN3@get_routin
  00005	48 85 d2	 test	 rdx, rdx
  00008	0f 85 00 00 00
	00		 jne	 RtlFindExportedRoutineByName
$LN3@get_routin:

; 96   : 			return NULL;

  0000e	33 c0		 xor	 eax, eax

; 97   : 		return (uintptr_t)RtlFindExportedRoutineByName((PVOID)image, name);
; 98   : 	}

  00010	c3		 ret	 0
?get_routine_address@system@@YA_K_KPEBD@Z ENDP		; system::get_routine_address
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\system\sys_funcs.cpp
;	COMDAT ?get_system_module@system@@YA_KPEBG@Z
_TEXT	SEGMENT
s_name$ = 32
su_name$ = 48
s_fullPath$1 = 64
pMod$2 = 80
name$ = 400
szModules$ = 408
?get_system_module@system@@YA_KPEBG@Z PROC		; system::get_system_module, COMDAT

; 28   : 	{

$LN45:
  00000	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  00005	57		 push	 rdi
  00006	48 81 ec 80 01
	00 00		 sub	 rsp, 384		; 00000180H

; 29   : 		NTSTATUS status = STATUS_SUCCESS;
; 30   : 		ANSI_STRING s_name;
; 31   : 		UNICODE_STRING su_name;
; 32   : 		RtlInitUnicodeString(&su_name, name);

  0000d	48 8b d1	 mov	 rdx, rcx
  00010	48 8d 4c 24 30	 lea	 rcx, QWORD PTR su_name$[rsp]
  00015	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RtlInitUnicodeString

; 33   : 		RtlUnicodeStringToAnsiString(&s_name, &su_name, TRUE);

  0001b	41 b0 01	 mov	 r8b, 1
  0001e	48 8d 54 24 30	 lea	 rdx, QWORD PTR su_name$[rsp]
  00023	48 8d 4c 24 20	 lea	 rcx, QWORD PTR s_name$[rsp]
  00028	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RtlUnicodeStringToAnsiString

; 34   : 
; 35   : 		PRTL_PROCESS_MODULES pModules = NULL;
; 36   : 		uint32_t szModules = 0;

  0002e	33 ff		 xor	 edi, edi

; 37   : 
; 38   : 		status = ZwQuerySystemInformation(SystemModuleInformation, 0, szModules, (PULONG)&szModules);

  00030	4c 8d 8c 24 98
	01 00 00	 lea	 r9, QWORD PTR szModules$[rsp]
  00038	45 33 c0	 xor	 r8d, r8d
  0003b	89 bc 24 98 01
	00 00		 mov	 DWORD PTR szModules$[rsp], edi
  00042	33 d2		 xor	 edx, edx
  00044	8d 4f 0b	 lea	 ecx, QWORD PTR [rdi+11]
  00047	e8 00 00 00 00	 call	 ZwQuerySystemInformation

; 39   : 		if (!szModules)

  0004c	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR szModules$[rsp]
  00053	85 c0		 test	 eax, eax
  00055	0f 84 c1 01 00
	00		 je	 $LN24@get_system

; 40   : 		{
; 41   : 			RtlFreeAnsiString(&s_name);
; 42   : 			return 0;
; 43   : 		}
; 44   : 
; 45   : 		pModules = (PRTL_PROCESS_MODULES)ExAllocatePool(NonPagedPool, szModules);

  0005b	8b d0		 mov	 edx, eax
  0005d	33 c9		 xor	 ecx, ecx
  0005f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ExAllocatePool
  00065	48 8b f0	 mov	 rsi, rax

; 46   : 		if (!pModules)

  00068	48 85 c0	 test	 rax, rax
  0006b	0f 84 ab 01 00
	00		 je	 $LN24@get_system

; 49   : 			return 0;
; 50   : 		}
; 51   : 		RtlZeroMemory(pModules, szModules);

  00071	44 8b 84 24 98
	01 00 00	 mov	 r8d, DWORD PTR szModules$[rsp]
  00079	33 d2		 xor	 edx, edx
  0007b	48 8b c8	 mov	 rcx, rax
  0007e	e8 00 00 00 00	 call	 memset

; 52   : 
; 53   : 		status = ZwQuerySystemInformation(SystemModuleInformation, pModules, szModules, (PULONG)&szModules);

  00083	44 8b 84 24 98
	01 00 00	 mov	 r8d, DWORD PTR szModules$[rsp]
  0008b	4c 8d 8c 24 98
	01 00 00	 lea	 r9, QWORD PTR szModules$[rsp]
  00093	48 8b d6	 mov	 rdx, rsi
  00096	8d 4f 0b	 lea	 ecx, QWORD PTR [rdi+11]
  00099	e8 00 00 00 00	 call	 ZwQuerySystemInformation

; 54   : 		if (!NT_SUCCESS(status))

  0009e	85 c0		 test	 eax, eax
  000a0	79 1b		 jns	 SHORT $LN9@get_system

; 55   : 		{
; 56   : 			RtlFreeAnsiString(&s_name);

  000a2	48 8d 4c 24 20	 lea	 rcx, QWORD PTR s_name$[rsp]
  000a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RtlFreeAnsiString

; 57   : 			ExFreePool(pModules);

  000ad	33 d2		 xor	 edx, edx
  000af	48 8b ce	 mov	 rcx, rsi
  000b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ExFreePoolWithTag

; 58   : 			return 0;

  000b8	e9 6a 01 00 00	 jmp	 $LN43@get_system
$LN9@get_system:
  000bd	48 89 9c 24 90
	01 00 00	 mov	 QWORD PTR [rsp+400], rbx

; 59   : 		}
; 60   : 
; 61   : 		uintptr_t modBase = 0;
; 62   : 		PRTL_PROCESS_MODULE_INFORMATION pMods = pModules->Modules;
; 63   : 		for (ULONG i = 0; i < pModules->NumberOfModules && !modBase; i++)

  000c5	8b df		 mov	 ebx, edi
  000c7	39 1e		 cmp	 DWORD PTR [rsi], ebx
  000c9	0f 86 1b 01 00
	00		 jbe	 $LN28@get_system
  000cf	90		 npad	 1
$LL4@get_system:
  000d0	48 85 ff	 test	 rdi, rdi
  000d3	0f 85 11 01 00
	00		 jne	 $LN28@get_system

; 64   : 		{
; 65   : 			RTL_PROCESS_MODULE_INFORMATION pMod = pMods[i];

  000d9	8b c3		 mov	 eax, ebx
  000db	48 8d 4c 24 50	 lea	 rcx, QWORD PTR pMod$2[rsp]
  000e0	48 69 c0 28 01
	00 00		 imul	 rax, rax, 296		; 00000128H
  000e7	8d 57 02	 lea	 edx, QWORD PTR [rdi+2]
  000ea	48 83 c0 08	 add	 rax, 8
  000ee	48 03 c6	 add	 rax, rsi
$LL27@get_system:
  000f1	48 8d 89 80 00
	00 00		 lea	 rcx, QWORD PTR [rcx+128]
  000f8	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000fb	0f 10 48 10	 movups	 xmm1, XMMWORD PTR [rax+16]
  000ff	48 8d 80 80 00
	00 00		 lea	 rax, QWORD PTR [rax+128]
  00106	0f 11 41 80	 movups	 XMMWORD PTR [rcx-128], xmm0
  0010a	0f 10 40 a0	 movups	 xmm0, XMMWORD PTR [rax-96]
  0010e	0f 11 49 90	 movups	 XMMWORD PTR [rcx-112], xmm1
  00112	0f 10 48 b0	 movups	 xmm1, XMMWORD PTR [rax-80]
  00116	0f 11 41 a0	 movups	 XMMWORD PTR [rcx-96], xmm0
  0011a	0f 10 40 c0	 movups	 xmm0, XMMWORD PTR [rax-64]
  0011e	0f 11 49 b0	 movups	 XMMWORD PTR [rcx-80], xmm1
  00122	0f 10 48 d0	 movups	 xmm1, XMMWORD PTR [rax-48]
  00126	0f 11 41 c0	 movups	 XMMWORD PTR [rcx-64], xmm0
  0012a	0f 10 40 e0	 movups	 xmm0, XMMWORD PTR [rax-32]
  0012e	0f 11 49 d0	 movups	 XMMWORD PTR [rcx-48], xmm1
  00132	0f 10 48 f0	 movups	 xmm1, XMMWORD PTR [rax-16]
  00136	0f 11 41 e0	 movups	 XMMWORD PTR [rcx-32], xmm0
  0013a	0f 11 49 f0	 movups	 XMMWORD PTR [rcx-16], xmm1
  0013e	48 83 ea 01	 sub	 rdx, 1
  00142	75 ad		 jne	 SHORT $LL27@get_system
  00144	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]

; 66   : 			char *fullPath = (char*)pMod.FullPathName;

  00147	48 8d 54 24 78	 lea	 rdx, QWORD PTR pMod$2[rsp+40]
  0014c	0f 10 48 10	 movups	 xmm1, XMMWORD PTR [rax+16]
  00150	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00154	0f 11 01	 movups	 XMMWORD PTR [rcx], xmm0
  00157	0f 11 49 10	 movups	 XMMWORD PTR [rcx+16], xmm1
  0015b	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 67   : 			if (fullPath && strlen(fullPath) > 0)

  0015f	48 8d 4c 24 78	 lea	 rcx, QWORD PTR pMod$2[rsp+40]
  00164	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0016b	0f 1f 44 00 00	 npad	 5
$LL26@get_system:
  00170	48 ff c0	 inc	 rax
  00173	80 3c 01 00	 cmp	 BYTE PTR [rcx+rax], 0
  00177	75 f7		 jne	 SHORT $LL26@get_system
  00179	48 85 c0	 test	 rax, rax
  0017c	74 62		 je	 SHORT $LN2@get_system

; 68   : 			{
; 69   : 				int32_t lastFound = -1;
; 70   : 				char *baseFullPath = (char *)pMod.FullPathName;
; 71   : 				while (*fullPath != 0)

  0017e	0f b6 4c 24 78	 movzx	 ecx, BYTE PTR pMod$2[rsp+40]
  00183	b8 ff ff ff ff	 mov	 eax, -1
  00188	84 c9		 test	 cl, cl
  0018a	74 2e		 je	 SHORT $LN13@get_system
  0018c	0f 1f 40 00	 npad	 4
$LL5@get_system:

; 72   : 				{
; 73   : 					if (*fullPath == '\\')

  00190	80 f9 5c	 cmp	 cl, 92			; 0000005cH
  00193	75 0b		 jne	 SHORT $LN12@get_system

; 74   : 						lastFound = (fullPath - baseFullPath) + 1;

  00195	48 8d 4c 24 78	 lea	 rcx, QWORD PTR pMod$2[rsp+40]
  0019a	8b c2		 mov	 eax, edx
  0019c	2b c1		 sub	 eax, ecx
  0019e	ff c0		 inc	 eax
$LN12@get_system:

; 75   : 					fullPath++;

  001a0	0f b6 4a 01	 movzx	 ecx, BYTE PTR [rdx+1]
  001a4	48 ff c2	 inc	 rdx
  001a7	84 c9		 test	 cl, cl
  001a9	75 e5		 jne	 SHORT $LL5@get_system

; 76   : 				}
; 77   : 
; 78   : 				if (lastFound >= 0)

  001ab	85 c0		 test	 eax, eax
  001ad	78 0b		 js	 SHORT $LN13@get_system

; 79   : 					fullPath = baseFullPath + lastFound;

  001af	48 63 c8	 movsxd	 rcx, eax
  001b2	48 8d 54 24 78	 lea	 rdx, QWORD PTR pMod$2[rsp+40]
  001b7	48 03 d1	 add	 rdx, rcx
$LN13@get_system:

; 80   : 			}
; 81   : 			else continue;
; 82   : 
; 83   : 			ANSI_STRING s_fullPath;
; 84   : 			RtlInitAnsiString(&s_fullPath, fullPath);

  001ba	48 8d 4c 24 40	 lea	 rcx, QWORD PTR s_fullPath$1[rsp]
  001bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RtlInitAnsiString

; 85   : 			if (RtlEqualString(&s_fullPath, &s_name, TRUE))

  001c5	41 b0 01	 mov	 r8b, 1
  001c8	48 8d 54 24 20	 lea	 rdx, QWORD PTR s_name$[rsp]
  001cd	48 8d 4c 24 40	 lea	 rcx, QWORD PTR s_fullPath$1[rsp]
  001d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RtlEqualString
  001d8	84 c0		 test	 al, al
  001da	48 0f 45 7c 24
	60		 cmovne	 rdi, QWORD PTR pMod$2[rsp+16]
$LN2@get_system:

; 59   : 		}
; 60   : 
; 61   : 		uintptr_t modBase = 0;
; 62   : 		PRTL_PROCESS_MODULE_INFORMATION pMods = pModules->Modules;
; 63   : 		for (ULONG i = 0; i < pModules->NumberOfModules && !modBase; i++)

  001e0	ff c3		 inc	 ebx
  001e2	3b 1e		 cmp	 ebx, DWORD PTR [rsi]
  001e4	0f 82 e6 fe ff
	ff		 jb	 $LL4@get_system
$LN28@get_system:

; 86   : 				modBase = (uintptr_t)pMod.ImageBase;
; 87   : 		}
; 88   : 		RtlFreeAnsiString(&s_name);

  001ea	48 8d 4c 24 20	 lea	 rcx, QWORD PTR s_name$[rsp]
  001ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RtlFreeAnsiString

; 89   : 		ExFreePool(pModules);

  001f5	33 d2		 xor	 edx, edx
  001f7	48 8b ce	 mov	 rcx, rsi
  001fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ExFreePoolWithTag

; 90   : 		return modBase;

  00200	48 8b 9c 24 90
	01 00 00	 mov	 rbx, QWORD PTR [rsp+400]
  00208	48 8b c7	 mov	 rax, rdi

; 91   : 	}

  0020b	48 8b b4 24 a0
	01 00 00	 mov	 rsi, QWORD PTR [rsp+416]
  00213	48 81 c4 80 01
	00 00		 add	 rsp, 384		; 00000180H
  0021a	5f		 pop	 rdi
  0021b	c3		 ret	 0
$LN24@get_system:

; 47   : 		{
; 48   : 			RtlFreeAnsiString(&s_name);

  0021c	48 8d 4c 24 20	 lea	 rcx, QWORD PTR s_name$[rsp]
  00221	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RtlFreeAnsiString
$LN43@get_system:

; 91   : 	}

  00227	48 8b b4 24 a0
	01 00 00	 mov	 rsi, QWORD PTR [rsp+416]
  0022f	33 c0		 xor	 eax, eax
  00231	48 81 c4 80 01
	00 00		 add	 rsp, 384		; 00000180H
  00238	5f		 pop	 rdi
  00239	c3		 ret	 0
?get_system_module@system@@YA_KPEBG@Z ENDP		; system::get_system_module
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\system\sys_funcs.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\km\wdm.h
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\system\sys_funcs.cpp
;	COMDAT ?get_loaded_module@system@@YA_KPEBGPEAPEAU_LDR_DATA_TABLE_ENTRY@1@@Z
_TEXT	SEGMENT
modName$ = 32
name$ = 64
entry$ = 72
?get_loaded_module@system@@YA_KPEBGPEAPEAU_LDR_DATA_TABLE_ENTRY@1@@Z PROC ; system::get_loaded_module, COMDAT

; 7    : 	{

$LN24:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fa	 mov	 rdi, rdx

; 8    : 		if (!name || PsLoadedModuleList == NULL || IsListEmpty(PsLoadedModuleList))

  0000d	48 85 c9	 test	 rcx, rcx
  00010	74 63		 je	 SHORT $LN6@get_loaded
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_PsLoadedModuleList
  00019	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  0001c	4d 85 c0	 test	 r8, r8
  0001f	74 54		 je	 SHORT $LN6@get_loaded
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\km\wdm.h

; 12574:     return (BOOLEAN)(ListHead->Flink == ListHead);

  00021	4d 39 00	 cmp	 QWORD PTR [r8], r8
; File C:\Users\leonk\OneDrive\Desktop\EAC\driver\system\sys_funcs.cpp

; 8    : 		if (!name || PsLoadedModuleList == NULL || IsListEmpty(PsLoadedModuleList))

  00024	74 4f		 je	 SHORT $LN6@get_loaded

; 10   : 
; 11   : 		UNICODE_STRING modName;
; 12   : 		RtlInitUnicodeString(&modName, name);

  00026	48 8b d1	 mov	 rdx, rcx
  00029	48 8d 4c 24 20	 lea	 rcx, QWORD PTR modName$[rsp]
  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RtlInitUnicodeString

; 13   : 
; 14   : 		for (PLIST_ENTRY pEntry = PsLoadedModuleList->Flink; pEntry != PsLoadedModuleList; pEntry = pEntry->Flink)

  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_PsLoadedModuleList
  0003b	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0003e	48 8b 19	 mov	 rbx, QWORD PTR [rcx]
  00041	48 3b d9	 cmp	 rbx, rcx
  00044	74 2f		 je	 SHORT $LN6@get_loaded
  00046	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL4@get_loaded:

; 15   : 		{
; 16   : 			PLDR_DATA_TABLE_ENTRY data = CONTAINING_RECORD(pEntry, LDR_DATA_TABLE_ENTRY, InLoadOrderLinks);
; 17   : 			if (RtlEqualUnicodeString(&data->BaseDllName, &modName, TRUE))

  00050	48 8d 4b 58	 lea	 rcx, QWORD PTR [rbx+88]
  00054	41 b0 01	 mov	 r8b, 1
  00057	48 8d 54 24 20	 lea	 rdx, QWORD PTR modName$[rsp]
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RtlEqualUnicodeString
  00062	84 c0		 test	 al, al
  00064	75 1c		 jne	 SHORT $LN13@get_loaded

; 13   : 
; 14   : 		for (PLIST_ENTRY pEntry = PsLoadedModuleList->Flink; pEntry != PsLoadedModuleList; pEntry = pEntry->Flink)

  00066	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_PsLoadedModuleList
  0006d	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
  00070	48 3b 18	 cmp	 rbx, QWORD PTR [rax]
  00073	75 db		 jne	 SHORT $LL4@get_loaded
$LN6@get_loaded:

; 9    : 			return NULL;

  00075	33 c0		 xor	 eax, eax

; 22   : 			}
; 23   : 		}
; 24   : 		return NULL;
; 25   : 	}

  00077	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0007c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00080	5f		 pop	 rdi
  00081	c3		 ret	 0
$LN13@get_loaded:

; 18   : 			{
; 19   : 				if (entry)

  00082	48 85 ff	 test	 rdi, rdi
  00085	74 03		 je	 SHORT $LN8@get_loaded

; 20   : 					*entry = data;

  00087	48 89 1f	 mov	 QWORD PTR [rdi], rbx
$LN8@get_loaded:

; 21   : 				return (uintptr_t)data->DllBase;

  0008a	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]

; 22   : 			}
; 23   : 		}
; 24   : 		return NULL;
; 25   : 	}

  0008e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00093	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00097	5f		 pop	 rdi
  00098	c3		 ret	 0
?get_loaded_module@system@@YA_KPEBGPEAPEAU_LDR_DATA_TABLE_ENTRY@1@@Z ENDP ; system::get_loaded_module
_TEXT	ENDS
END
